<template>
  <div id="body" ref="body" background="./img/bg0.png">
    <div class="upper-container">
      <!-- 唱片背景 -->
      <div class="record-container">
        <div class="record-bg">
          <div id="record-img" ref="record-img" class="rotate-play"></div>
        </div>
      </div>
      <!-- 音乐介绍 -->
      <div class="introduction-container">
        <div class="text-container">
          <div id="music-title" ref="music-title">音乐1</div>
          <div class="author-container">作者：
            <span id="author-name" ref="author-name">未知</span>
          </div>
        </div>
      </div>
    </div>
    <!-- 音乐播放器主要内容 -->
    <div class="audio-box">
      <div class="audio-container">
        <audio id="audioTag" ref="audioTag"></audio>
        <!-- 进度条 -->
        <div class="a-progress">
          <div class="pgs-total" id="progress-total" ref="progress-total">
            <div class="pgs-play" id="progress" ref="progress" style="width: 0%;"></div>
          </div>
        </div>
        <!-- 下排控制按钮 -->
        <div class="a-controls">
          <!-- 播放时长 -->
          <div class="time-container">
            <span class="played-time" id="playedTime" ref="playedTime">00:00</span>&nbsp;/&nbsp;
            <span class="audio-time" id="audioTime" ref="audioTime">00:00</span>
          </div>
          <!-- 中间按钮 -->
          <div class="center-button-container">
            <!-- 播放模式 -->
            <div id="playMode" ref="playMode" class="center-icon mode"></div>
            <!-- 上一首 -->
            <div id="skipForward" ref="skipForward" class="center-icon s-right"></div>
            <!-- 暂停按钮 -->
            <div id="playPause" ref="playPause" class="icon-play"></div>
            <!-- 下一首 -->
            <div id="skipBackward" ref="skipBackward" class="center-icon s-left"></div>
            <!-- 音量调节 -->
            <div id="volume" ref="volume" class="center-icon volume"></div>
            <!-- 音量悬浮窗 -->
            <input type="range" id="volumn-togger" ref="volumn-togger" name="change" value="70" min="0" max="100" step="1">
          </div>
          <!-- 后部按钮 -->
          <div class="bottom-button-container">
            <!-- 列表 -->
            <div id="list"  ref="list" class="bottom-icon list"></div>
            <!-- 倍速 -->
            <div id="speed" ref="speed" class="speed">1.0X</div>
            <!-- MV -->
            <div id="MV" ref="MV" class="bottom-icon MV"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- 音乐列表 -->
    <div class="close-list" ref="close-list" id="close-list"></div>
    <div class="music-list" ref="music-list" id="music-list">
      <div class="music-list-container">
        <div class="music-list-title">播放队列</div>
        <hr class="line">
        <div class="all-list">
          <div id="music0" ref="music0">洛春赋</div>
          <div id="music1" ref="music1">Yesterday</div>
          <div id="music2" ref="music2">江南烟雨色</div>
          <div id="music3" ref="music3">Vision pt.II</div>
        </div>
      </div>
    </div>

  </div>
</template>


<script setup>

import { ref, computed, watch, onMounted ,useTemplateRef} from 'vue';
// 获取主题背景
var body = useTemplateRef('body');
// 获取音频播放器对象
var audio = useTemplateRef('audioTag');

// 歌曲名
var musicTitle = useTemplateRef('music-title');
// 歌曲海报
var recordImg = useTemplateRef('record-img');
// 歌曲作者
var author = useTemplateRef('author-name');

// 进度条
var progress = useTemplateRef('progress');
// 总进度条
var progressTotal = useTemplateRef('progress-total');

// 已进行时长
var playedTime = useTemplateRef('playedTime');
// 总时长
var audioTime = useTemplateRef('audioTime');

// 播放模式按钮
var mode = useTemplateRef('playMode');
// 上一首
var skipForward = useTemplateRef('skipForward');
// 暂停按钮
var pause = useTemplateRef('playPause');
// 下一首
var skipBackward = useTemplateRef('skipBackward');
// 音量调节
var volume = useTemplateRef('volume');
// 音量调节滑块
var volumeTogger = useTemplateRef('volumn-togger');

// 列表
var list = useTemplateRef('list');
// 倍速
var speed = useTemplateRef('speed');
// MV
var MV = useTemplateRef('MV');

// 左侧关闭面板
var closeList = useTemplateRef('close-list');
// 音乐列表面板
var musicList = useTemplateRef('music-list');

// 暂停/播放功能实现
pause.value.onclick = function (e) {
  if (audio.value.paused) {
    audio.value.play();
    rotateRecord();
    pause.value.classList.remove('icon-play');
    pause.value.classList.add('icon-pause');
  } else {
    audio.value.pause();
    rotateRecordStop();
    pause.value.classList.remove('icon-pause');
    pause.value.classList.add('icon-play');
  }
}

// 更新进度条
audio.value.addEventListener('timeupdate', updateProgress); // 监听音频播放时间并更新进度条
function updateProgress() {
  var value = audio.value.currentTime / audio.value.duration;
  progress.value.style.width = value * 100 + '%';
  playedTime.value.innerText = transTime(audio.value.currentTime);
}

//音频播放时间换算
function transTime(value) {
  var time = "";
  var h = parseInt(value / 3600);
  value %= 3600;
  var m = parseInt(value / 60);
  var s = parseInt(value % 60);
  if (h > 0) {
    time = formatTime(h + ":" + m + ":" + s);
  } else {
    time = formatTime(m + ":" + s);
  }

  return time;
}

// 格式化时间显示，补零对齐
function formatTime(value) {
  var time = "";
  var s = value.split(':');
  var i = 0;
  for (; i < s.length - 1; i++) {
    time += s[i].length == 1 ? ("0" + s[i]) : s[i];
    time += ":";
  }
  time += s[i].length == 1 ? ("0" + s[i]) : s[i];

  return time;
}

// 点击进度条跳到指定点播放
progressTotal.value.addEventListener('mousedown', function (event) {
  // 只有音乐开始播放后才可以调节，已经播放过但暂停了的也可以
  if (!audio.value.paused || audio.value.currentTime != 0) {
    var pgsWidth = parseFloat(window.getComputedStyle(progressTotal.value, null).width.replace('px', ''));
    var rate = event.offsetX / pgsWidth;
    audio.value.currentTime = audio.value.duration * rate;
    updateProgress(audio);
  }
});

// 点击列表展开音乐列表
list.value.addEventListener('click', function (event) {
  musicList.value.classList.remove("list-card-hide");
  musicList.value.classList.add("list-card-show");
  musicList.value.style.display = "flex";
  closeList.value.style.display = "flex";
  closeList.value.addEventListener('click', closeListBoard);
});

// 点击关闭面板关闭音乐列表
function closeListBoard() {
  musicList.value.classList.remove("list-card-show");
  musicList.value.classList.add("list-card-hide");
  closeList.value.style.display = "none";
}

// 存储当前播放的音乐序号
var musicId = 0;

// 后台音乐列表
let musicData = [['洛春赋', '云汐'], ['Yesterday', 'Alok/Sofi Tukker'], ['江南烟雨色', '杨树人'], ['Vision pt.II', 'Vicetone']];

// 初始化音乐
function initMusic() {
  audio.src = "mp3/music" + musicId.toString() + ".mp3";
  audio.value.load();
  recordImg.value.classList.remove('rotate-play');
  audio.ondurationchange = function () {
    musicTitle.innerText = musicData[musicId][0];
    author.innerText = musicData[musicId][1];
    recordImg.value.style.backgroundImage = "url('img/record"+musicId.toString()+".jpg')";
    body.value.style.backgroundImage = "url('img/bg"+musicId.toString()+".png')";
    audioTime.value.innerText = transTime(audio.value.duration);
    // 重置进度条
    audio.value.currentTime = 0;
    updateProgress();
    refreshRotate();
  }
}
initMusic();

// 初始化并播放
function initAndPlay() {
  initMusic();
  pause.value.classList.remove('icon-play');
  pause.value.classList.add('icon-pause');
  audio.value.play();
  rotateRecord();
}

// 播放模式设置
var modeId = 1;
mode.value.addEventListener('click', function (event) {
  modeId = modeId + 1;
  if (modeId > 3) {
    modeId = 1;
  }
  mode.value.style.backgroundImage = "url('img/mode" + modeId.toString() + ".png')";
});

audio.value.onended = function () {
  if (modeId == 2) {
    // 跳转至下一首歌
    musicId = (musicId + 1) % 4;
  }
  else if (modeId == 3) {
    // 随机生成下一首歌的序号
    var oldId = musicId;
    while (true) {
      musicId = Math.floor(Math.random() * 3) + 0;
      if (musicId != oldId) { break; }
    }
  }
  initAndPlay();
}

// 上一首
skipForward.value.addEventListener('click', function (event) {
  musicId = musicId - 1;
  if (musicId < 0) {
    musicId = 3;
  }
  initAndPlay();
});

// 下一首
skipBackward.value.addEventListener('click', function (event) {
  musicId = musicId + 1;
  if (musicId > 3) {
    musicId = 0;
  }
  initAndPlay();
});

// 倍速功能（这里直接暴力解决了）
speed.value.addEventListener('click', function (event) {
  var speedText = speed.value.innerText;
  if (speedText == "1.0X") {
    speed.value.innerText = "1.5X";
    audio.value.playbackRate = 1.5;
  }
  else if (speedText == "1.5X") {
    speed.value.innerText = "2.0X";
    audio.value.playbackRate = 2.0;
  }
  else if (speedText == "2.0X") {
    speed.value.innerText = "0.5X";
    audio.value.playbackRate = 0.5;
  }
  else if (speedText == "0.5X") {
    speed.value.innerText = "1.0X";
    audio.value.playbackRate = 1.0;
  }
});

// MV功能
MV.value.addEventListener('click', function (event) {
  // 向新窗口传值
  var storage_list = window.sessionStorage;
  storage_list['musicId'] = musicId;
  window.open("video.html");
});

// 暴力捆绑列表音乐
useTemplateRef("music0").value.addEventListener('click', function (event) {
  musicId = 0;
  initAndPlay();
});
useTemplateRef("music1").value.addEventListener('click', function (event) {
  musicId = 1;
  initAndPlay();
});
useTemplateRef("music2").value.addEventListener('click', function (event) {
  musicId = 2;
  initAndPlay();
});
useTemplateRef("music3").value.addEventListener('click', function (event) {
  musicId = 3;
  initAndPlay();
});

// 刷新唱片旋转角度
function refreshRotate() {
  recordImg.value.classList.add('rotate-play');
}

// 使唱片旋转
function rotateRecord() {
  recordImg.value.style.animationPlayState = "running"
}

// 停止唱片旋转
function rotateRecordStop() {
  recordImg.value.style.animationPlayState = "paused"
}

// 存储上一次的音量
var lastVolumn = 70

// 滑块调节音量
audio.value.addEventListener('timeupdate', updateVolumn);
function updateVolumn() {
  audio.value.volume = volumeTogger.value.value / 70;
}

// 点击音量调节设置静音
volume.value.addEventListener('click', setNoVolumn);
function setNoVolumn() {
  if (volumeTogger.value.value == 0) {
    if (lastVolumn == 0) {
      lastVolumn = 70;
    }
    volumeTogger.value.value = lastVolumn;
    volume.value.style.backgroundImage = "url('img/音量.png')";
  }
  else {
    lastVolumn = volumeTogger.value.value;
    volumeTogger.value.value = 0;
    volume.value.style.backgroundImage = "url('img/静音.png')";
  }
}

// 生命周期钩子
onMounted(() => {
  initAndPlay();
});
</script>

<style scoped>
/* 添加你的样式 */
@import url("./css/audio.css");
</style>
